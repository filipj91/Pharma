# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q9AFaXYsj0KTAW2jhx9DxGk4nUfFgP_K
"""

import streamlit as st
import pandas as pd
import plotly.express as px

# Streamlit Page Config
st.set_page_config(page_title="Pharma Sales Dashboard", layout="wide")

# File Paths
# File Paths
data_paths = {
    "Daily": "D:/Projekty/Pharma/dataset/salesdaily.csv",
    "Hourly": "D:/Projekty/Pharma/dataset/saleshourly.csv",
    "Monthly": "D:/Projekty/Pharma/dataset/salesmonthly.csv",
    "Weekly": "D:/Projekty/Pharma/dataset/salesweekly.csv"
}

# Load Data
@st.cache_data
def load_data(file_path):
    try:
        data = pd.read_csv(file_path)
        data['datum'] = pd.to_datetime(data['datum'], errors='coerce')
        data = data.dropna(subset=['datum'])  # Remove invalid dates
        numeric_columns = data.select_dtypes(include='number').columns
        return data[['datum'] + list(numeric_columns)]  # Keep only numeric data and datum
    except Exception as e:
        st.error(f"Error loading data: {e}")
        return pd.DataFrame()

# Sidebar
st.sidebar.title("Pharma Sales Dashboard")
data_option = st.sidebar.radio(
    "Choose dataset",
    ("Daily", "Hourly", "Monthly", "Weekly")
)

data = load_data(data_paths[data_option])

if data.empty:
    st.error(f"Could not load data for: {data_option}. Check the file or its format.")
else:
    st.title(f"Pharma Sales Analysis ({data_option})")
    st.markdown("### Explore sales data with filters and dynamic visualizations.")

    # Filter by Date
    st.sidebar.subheader("Filter by Date")
    start_date = st.sidebar.date_input("Start Date", value=data['datum'].min())
    end_date = st.sidebar.date_input("End Date", value=data['datum'].max())

    filtered_data = data[(data['datum'] >= pd.Timestamp(start_date)) & (data['datum'] <= pd.Timestamp(end_date))]

    if filtered_data.empty:
        st.warning("No data available for the selected date range.")
    else:
        # Line Chart
        st.subheader("Sales Trends Over Time")
        column_to_plot = st.sidebar.selectbox("Choose a column to visualize (Line Chart)", filtered_data.columns[1:])
        fig_line = px.line(
            filtered_data,
            x='datum',
            y=column_to_plot,
            title=f"Sales Trends - {column_to_plot}",
            markers=True
        )
        fig_line.update_layout(hovermode="x unified")
        st.plotly_chart(fig_line, use_container_width=True)

        # Heatmap
        st.subheader("Sales Heatmap")
        fig_heatmap = px.density_heatmap(
            filtered_data,
            x='datum',
            y=column_to_plot,
            color_continuous_scale='Viridis',
            title=f"Sales Intensity Heatmap - {column_to_plot}"
        )
        st.plotly_chart(fig_heatmap, use_container_width=True)

        # Bar Chart
        st.subheader("Total Sales by Date")
        fig_bar = px.bar(
            filtered_data,
            x='datum',
            y=column_to_plot,
            title=f"Total Sales Per Day - {column_to_plot}",
            color=column_to_plot,
            color_continuous_scale='Blues'
        )
        st.plotly_chart(fig_bar, use_container_width=True)

        # Display Data
        st.subheader("Filtered Data Preview")
        st.dataframe(filtered_data)